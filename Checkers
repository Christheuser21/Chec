#!/usr/bin/python
import pygame #The graphical Interface(GUI) that allows the game to be played
import math 
import random 

#The Game Colors
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

#The Constant variables
WIDTH = 700
HEIGHT = 700
MARK_SIZE = 50

#This class setups the playing board
class Checkers:
    def __init__(self):
        self.status = 'playing'
        self.turn = random.randrange(2)
        self.players = ['x', 'o']
        self.selected_token = None
        self.jumping = False
        pygame.display.set_caption("%s's turn" % self.players[self.turn
                                   % 2])
        self.game_board = [ #this sets up what the game board looks like
            [
                'x', '-', 'x', '-', 'x', '-', 'x', '-',
                ],
            [
                '-', 'x', '-', 'x', '-', 'x', '-', 'x',
                ],
            [
                'x', '-', 'x', '-', 'x', '-', 'x', '-',
                ],
            [
                '-', '-', '-', '-', '-', '-', '-', '-',
                ],
            [
                '-', '-', '-', '-', '-', '-', '-', '-',
                ],
            [
                '-', 'o', '-', 'o', '-', 'o', '-', 'o',
                ],
            [
                'o', '-', 'o', '-', 'o', '-', 'o', '-',
                ],
            [
                '-', 'o', '-', 'o', '-', 'o', '-', 'o',
                ],
            ]


    #This function happens when the player clicks the mouse
    def evaluate_click(self, mouse_pos):
        if self.status == 'playing':
            (row, column) = (get_clicked_row(mouse_pos),
                             get_clicked_column(mouse_pos))
            if self.selected_token:
                move = self.valid_move(self.players[self.turn % 2],
                        self.selected_token, row, column)
                if move[0]:
                    self.Game(self.players[self.turn % 2],
                              self.selected_token, row, column, move[1])
                elif row == self.selected_token[0] and column \
                    == self.selected_token[1]:
                    self.selected_token = None
                    if self.jumping:
                        self.jumping = False
                        self.next_turn()
                else: 
                    print 'invalid'
            else:
                if self.game_board[row][column].lower() \
                    == self.players[self.turn % 2]:
                    self.selected_token = [row, column]
        elif self.status == 'The Game Is Over':
            self.__init__()

#Insure that the move is valid
    def valid_move(
        self,
        player,
        token_location,
        to_row,
        to_col,
        ):
        from_row = token_location[0]
        from_col = token_location[1]
        token_char = self.game_board[from_row][from_col]
        if self.game_board[to_row][to_col] != '-':
            return (False, None)
        if (token_char.isupper() and abs(from_row - to_row) == 1
            or player == 'x' and to_row - from_row == 1 or player == 'o'
             and from_row - to_row == 1) and abs(from_col - to_col) \
            == 1 and not self.jumping:
            return (True, None)
        if (token_char.isupper() and abs(from_row - to_row) == 2
            or player == 'x' and to_row - from_row == 2 or player == 'o'
             and from_row - to_row == 2) and abs(from_col - to_col) \
            == 2:
            jump_row = (to_row - from_row) / 2 + from_row
            jump_col = (to_col - from_col) / 2 + from_col
            if self.game_board[jump_row][jump_col].lower() \
                not in [player, '-']:
                return (True, [jump_row, jump_col])
        return (False, None)

    #The Game Class, defining how the game is played
    def Game(
        self,
        player,
        token_location,
        to_row,
        to_col,
        jump,
        ):
        #the two lines below act like cooridents, rows and colums; to define where the checker is
        from_row = token_location[0] 
        from_col = token_location[1]

        token_char = self.game_board[from_row][from_col]
        self.game_board[to_row][to_col] = token_char
        self.game_board[from_row][from_col] = '-'
        if player == 'x' and to_row == 7 or player == 'o' and to_row \
            == 0:
            self.game_board[to_row][to_col] = token_char.upper()
        if jump:
            self.game_board[jump[0]][jump[1]] = '-'
            self.selected_token = [to_row, to_col]
            self.jumping = True
        else:
            self.selected_token = None
            self.next_turn()
        winner = self.check_winner()
        if winner is None:
            pygame.display.set_caption("%s's turn"
                    % self.players[self.turn % 2])
        elif winner == 'draw':
            pygame.display.set_caption("It's a tie! Click to start again"
                    )
            self.status = 'the game is over'
        else:
            pygame.display.set_caption('%s wins! Click to start again'
                    % winner)
            self.status = 'the game is over'

    #This function gets called when the current player is finished with their move
    def next_turn(self):
        self.turn += 1

        pygame.display.set_caption("%s's turn" % self.players[self.turn % 2]) #pygame is the import(basically allows the user to play the game with a GUI)

    #This is how the game dictates if there is a winner or not
    def check_winner(self):
        x = sum([row.count('x') + row.count('X') for row in
                self.game_board])
        if x == 0:
            return 'o'
        o = sum([row.count('o') + row.count('O') for row in
                self.game_board])
        if o == 0:
            return 'x'
        if x == 1 and o == 1:
            return 'draw'
        return None

    #This function gets called if the game believes there is a tie
    def draw(self):
        for i in range(9):
            pygame.draw.line(screen, WHITE, [i * WIDTH / 8, 0], [i
                             * WIDTH / 8, HEIGHT], 5)
            pygame.draw.line(screen, WHITE, [0, i * HEIGHT / 8],
                             [WIDTH, i * HEIGHT / 8], 5)
        font = pygame.font.SysFont('Calibri', MARK_SIZE, False, False)
        for r in range(len(self.game_board)):
            for c in range(len(self.game_board[r])):
                mark = self.game_board[r][c]
                if self.players[self.turn % 2] == mark.lower():
                    color = YELLOW
                else:
                    color = WHITE
                if self.selected_token:
                    if self.selected_token[0] == r \
                        and self.selected_token[1] == c:
                        color = RED
                if mark != '-':
                    mark_text = font.render(self.game_board[r][c],
                            True, color)
                    x = WIDTH / 8 * c + WIDTH / 16
                    y = HEIGHT / 8 * r + HEIGHT / 16
                    screen.blit(mark_text, [x - mark_text.get_width()
                                / 2, y - mark_text.get_height() / 2])

def get_clicked_column(mouse_pos):
    x = mouse_pos[0]
    for i in range(1, 8):
        if x < i * WIDTH / 8:
            return i - 1
    return 7

def get_clicked_row(mouse_pos):
    y = mouse_pos[1]
    for i in range(1, 8):
        if y < i * HEIGHT / 8:
            return i - 1
    return 7

#This sets up the pygame GUI
pygame.init()
size = (WIDTH, HEIGHT)
screen = pygame.display.set_mode(size)

#This starts the game
game = Checkers()
#This loops each round til the game is closed
done = False
#This sets the refresh rate of the game(How often/fast each second is)
clock = pygame.time.Clock()

while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        if event.type == pygame.KEYDOWN:
            entry = str(event.key)
        if event.type == pygame.MOUSEBUTTONDOWN:
            (mouse_x, mouse_y) = pygame.mouse.get_pos()
            game.evaluate_click(pygame.mouse.get_pos())
    screen.fill(BLACK)
    game.draw()
    pygame.display.flip()
    clock.tick(60)
pygame.quit()
